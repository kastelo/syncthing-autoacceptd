// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: proto/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mode int32

const (
	Mode_SENDRECEIVE Mode = 0
	Mode_SENDONLY    Mode = 1
	Mode_RECEIVEONLY Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "SENDRECEIVE",
		1: "SENDONLY",
		2: "RECEIVEONLY",
	}
	Mode_value = map[string]int32{
		"SENDRECEIVE": 0,
		"SENDONLY":    1,
		"RECEIVEONLY": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_proto_config_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{0}
}

type FolderType int32

const (
	FolderType_SEND_RECEIVE      FolderType = 0
	FolderType_SEND_ONLY         FolderType = 1
	FolderType_RECEIVE_ONLY      FolderType = 2
	FolderType_RECEIVE_ENCRYPTED FolderType = 3
)

// Enum value maps for FolderType.
var (
	FolderType_name = map[int32]string{
		0: "SEND_RECEIVE",
		1: "SEND_ONLY",
		2: "RECEIVE_ONLY",
		3: "RECEIVE_ENCRYPTED",
	}
	FolderType_value = map[string]int32{
		"SEND_RECEIVE":      0,
		"SEND_ONLY":         1,
		"RECEIVE_ONLY":      2,
		"RECEIVE_ENCRYPTED": 3,
	}
)

func (x FolderType) Enum() *FolderType {
	p := new(FolderType)
	*p = x
	return p
}

func (x FolderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FolderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_proto_enumTypes[1].Descriptor()
}

func (FolderType) Type() protoreflect.EnumType {
	return &file_proto_config_proto_enumTypes[1]
}

func (x FolderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FolderType.Descriptor instead.
func (FolderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{1}
}

type PullOrder int32

const (
	PullOrder_PULL_RANDOM         PullOrder = 0
	PullOrder_PULL_ALPHABETIC     PullOrder = 1
	PullOrder_PULL_SMALLEST_FIRST PullOrder = 2
	PullOrder_PULL_LARGEST_FIRST  PullOrder = 3
	PullOrder_PULL_OLDEST_FIRST   PullOrder = 4
	PullOrder_PULL_NEWEST_FIRST   PullOrder = 5
)

// Enum value maps for PullOrder.
var (
	PullOrder_name = map[int32]string{
		0: "PULL_RANDOM",
		1: "PULL_ALPHABETIC",
		2: "PULL_SMALLEST_FIRST",
		3: "PULL_LARGEST_FIRST",
		4: "PULL_OLDEST_FIRST",
		5: "PULL_NEWEST_FIRST",
	}
	PullOrder_value = map[string]int32{
		"PULL_RANDOM":         0,
		"PULL_ALPHABETIC":     1,
		"PULL_SMALLEST_FIRST": 2,
		"PULL_LARGEST_FIRST":  3,
		"PULL_OLDEST_FIRST":   4,
		"PULL_NEWEST_FIRST":   5,
	}
)

func (x PullOrder) Enum() *PullOrder {
	p := new(PullOrder)
	*p = x
	return p
}

func (x PullOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PullOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_proto_enumTypes[2].Descriptor()
}

func (PullOrder) Type() protoreflect.EnumType {
	return &file_proto_config_proto_enumTypes[2]
}

func (x PullOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PullOrder.Descriptor instead.
func (PullOrder) EnumDescriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{2}
}

type BlockPullOrder int32

const (
	BlockPullOrder_BLOCKS_STANDARD BlockPullOrder = 0
	BlockPullOrder_BLOCKS_RANDOM   BlockPullOrder = 1
	BlockPullOrder_BLOCKS_IN_ORDER BlockPullOrder = 2
)

// Enum value maps for BlockPullOrder.
var (
	BlockPullOrder_name = map[int32]string{
		0: "BLOCKS_STANDARD",
		1: "BLOCKS_RANDOM",
		2: "BLOCKS_IN_ORDER",
	}
	BlockPullOrder_value = map[string]int32{
		"BLOCKS_STANDARD": 0,
		"BLOCKS_RANDOM":   1,
		"BLOCKS_IN_ORDER": 2,
	}
)

func (x BlockPullOrder) Enum() *BlockPullOrder {
	p := new(BlockPullOrder)
	*p = x
	return p
}

func (x BlockPullOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockPullOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_proto_enumTypes[3].Descriptor()
}

func (BlockPullOrder) Type() protoreflect.EnumType {
	return &file_proto_config_proto_enumTypes[3]
}

func (x BlockPullOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockPullOrder.Descriptor instead.
func (BlockPullOrder) EnumDescriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{3}
}

type CopyRangeMethod int32

const (
	CopyRangeMethod_COPY_RANGE_STANDARD          CopyRangeMethod = 0
	CopyRangeMethod_COPY_RANGE_IOCTL             CopyRangeMethod = 1
	CopyRangeMethod_COPY_RANGE_COPY_FILE_RANGE   CopyRangeMethod = 2
	CopyRangeMethod_COPY_RANGE_SEND_FILE         CopyRangeMethod = 3
	CopyRangeMethod_COPY_RANGE_DUPLICATE_EXTENTS CopyRangeMethod = 4
	CopyRangeMethod_COPY_RANGE_ALL_WITH_FALLBACK CopyRangeMethod = 5
)

// Enum value maps for CopyRangeMethod.
var (
	CopyRangeMethod_name = map[int32]string{
		0: "COPY_RANGE_STANDARD",
		1: "COPY_RANGE_IOCTL",
		2: "COPY_RANGE_COPY_FILE_RANGE",
		3: "COPY_RANGE_SEND_FILE",
		4: "COPY_RANGE_DUPLICATE_EXTENTS",
		5: "COPY_RANGE_ALL_WITH_FALLBACK",
	}
	CopyRangeMethod_value = map[string]int32{
		"COPY_RANGE_STANDARD":          0,
		"COPY_RANGE_IOCTL":             1,
		"COPY_RANGE_COPY_FILE_RANGE":   2,
		"COPY_RANGE_SEND_FILE":         3,
		"COPY_RANGE_DUPLICATE_EXTENTS": 4,
		"COPY_RANGE_ALL_WITH_FALLBACK": 5,
	}
)

func (x CopyRangeMethod) Enum() *CopyRangeMethod {
	p := new(CopyRangeMethod)
	*p = x
	return p
}

func (x CopyRangeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyRangeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_config_proto_enumTypes[4].Descriptor()
}

func (CopyRangeMethod) Type() protoreflect.EnumType {
	return &file_proto_config_proto_enumTypes[4]
}

func (x CopyRangeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyRangeMethod.Descriptor instead.
func (CopyRangeMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{4}
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Syncthing []*SyncthingInstance `protobuf:"bytes,1,rep,name=syncthing,proto3" json:"syncthing,omitempty"`
	Pattern   []*DevicePattern     `protobuf:"bytes,2,rep,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetSyncthing() []*SyncthingInstance {
	if x != nil {
		return x.Syncthing
	}
	return nil
}

func (x *Configuration) GetPattern() []*DevicePattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

type SyncthingInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ApiKey  string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *SyncthingInstance) Reset() {
	*x = SyncthingInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncthingInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncthingInstance) ProtoMessage() {}

func (x *SyncthingInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncthingInstance.ProtoReflect.Descriptor instead.
func (*SyncthingInstance) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *SyncthingInstance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SyncthingInstance) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type DevicePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folder     []*FolderPattern     `protobuf:"bytes,1,rep,name=folder,proto3" json:"folder,omitempty"`
	AcceptCidr []string             `protobuf:"bytes,2,rep,name=accept_cidr,json=acceptCidr,proto3" json:"accept_cidr,omitempty"`
	Settings   *DeviceConfiguration `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DevicePattern) Reset() {
	*x = DevicePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePattern) ProtoMessage() {}

func (x *DevicePattern) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePattern.ProtoReflect.Descriptor instead.
func (*DevicePattern) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{2}
}

func (x *DevicePattern) GetFolder() []*FolderPattern {
	if x != nil {
		return x.Folder
	}
	return nil
}

func (x *DevicePattern) GetAcceptCidr() []string {
	if x != nil {
		return x.AcceptCidr
	}
	return nil
}

func (x *DevicePattern) GetSettings() *DeviceConfiguration {
	if x != nil {
		return x.Settings
	}
	return nil
}

type FolderPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Settings *FolderConfiguration `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *FolderPattern) Reset() {
	*x = FolderPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderPattern) ProtoMessage() {}

func (x *FolderPattern) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderPattern.ProtoReflect.Descriptor instead.
func (*FolderPattern) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{3}
}

func (x *FolderPattern) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FolderPattern) GetSettings() *FolderConfiguration {
	if x != nil {
		return x.Settings
	}
	return nil
}

type DeviceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses         []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	AllowedNetworks   []string `protobuf:"bytes,10,rep,name=allowed_networks,json=allowedNetworks,proto3" json:"allowed_networks,omitempty"`
	AutoAcceptFolders bool     `protobuf:"varint,11,opt,name=auto_accept_folders,json=autoAcceptFolders,proto3" json:"auto_accept_folders,omitempty"`
	MaxSendKbps       int32    `protobuf:"varint,12,opt,name=max_send_kbps,json=maxSendKbps,proto3" json:"max_send_kbps,omitempty"`
	MaxRecvKbps       int32    `protobuf:"varint,13,opt,name=max_recv_kbps,json=maxRecvKbps,proto3" json:"max_recv_kbps,omitempty"`
	MaxRequestKib     int32    `protobuf:"varint,16,opt,name=max_request_kib,json=maxRequestKib,proto3" json:"max_request_kib,omitempty"`
	NumConnections    int32    `protobuf:"varint,19,opt,name=num_connections,json=numConnections,proto3" json:"num_connections,omitempty"`
}

func (x *DeviceConfiguration) Reset() {
	*x = DeviceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfiguration) ProtoMessage() {}

func (x *DeviceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfiguration.ProtoReflect.Descriptor instead.
func (*DeviceConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceConfiguration) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DeviceConfiguration) GetAllowedNetworks() []string {
	if x != nil {
		return x.AllowedNetworks
	}
	return nil
}

func (x *DeviceConfiguration) GetAutoAcceptFolders() bool {
	if x != nil {
		return x.AutoAcceptFolders
	}
	return false
}

func (x *DeviceConfiguration) GetMaxSendKbps() int32 {
	if x != nil {
		return x.MaxSendKbps
	}
	return 0
}

func (x *DeviceConfiguration) GetMaxRecvKbps() int32 {
	if x != nil {
		return x.MaxRecvKbps
	}
	return 0
}

func (x *DeviceConfiguration) GetMaxRequestKib() int32 {
	if x != nil {
		return x.MaxRequestKib
	}
	return 0
}

func (x *DeviceConfiguration) GetNumConnections() int32 {
	if x != nil {
		return x.NumConnections
	}
	return 0
}

type FolderConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label                   string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Path                    string          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Type                    FolderType      `protobuf:"varint,5,opt,name=type,proto3,enum=config.FolderType" json:"type,omitempty"`
	RescanIntervalS         int32           `protobuf:"varint,7,opt,name=rescan_interval_s,json=rescanIntervalS,proto3" json:"rescan_interval_s,omitempty"`
	FsWatcherDisabled       bool            `protobuf:"varint,8,opt,name=fs_watcher_disabled,json=fsWatcherDisabled,proto3" json:"fs_watcher_disabled,omitempty"`
	FsWatcherDelayS         float64         `protobuf:"fixed64,9,opt,name=fs_watcher_delay_s,json=fsWatcherDelayS,proto3" json:"fs_watcher_delay_s,omitempty"`
	IgnorePermissions       bool            `protobuf:"varint,10,opt,name=ignore_permissions,json=ignorePermissions,proto3" json:"ignore_permissions,omitempty"`
	NoAutoNormalize         bool            `protobuf:"varint,11,opt,name=no_auto_normalize,json=noAutoNormalize,proto3" json:"no_auto_normalize,omitempty"`
	MinDiskFree             *Size           `protobuf:"bytes,12,opt,name=min_disk_free,json=minDiskFree,proto3" json:"min_disk_free,omitempty"`
	Copiers                 int32           `protobuf:"varint,14,opt,name=copiers,proto3" json:"copiers,omitempty"`
	PullerMaxPendingKib     int32           `protobuf:"varint,15,opt,name=puller_max_pending_kib,json=pullerMaxPendingKib,proto3" json:"puller_max_pending_kib,omitempty"`
	Hashers                 int32           `protobuf:"varint,16,opt,name=hashers,proto3" json:"hashers,omitempty"`
	Order                   PullOrder       `protobuf:"varint,17,opt,name=order,proto3,enum=config.PullOrder" json:"order,omitempty"`
	IgnoreDelete            bool            `protobuf:"varint,18,opt,name=ignore_delete,json=ignoreDelete,proto3" json:"ignore_delete,omitempty"`
	ScanProgressIntervalS   int32           `protobuf:"varint,19,opt,name=scan_progress_interval_s,json=scanProgressIntervalS,proto3" json:"scan_progress_interval_s,omitempty"`
	PullerPauseS            int32           `protobuf:"varint,20,opt,name=puller_pause_s,json=pullerPauseS,proto3" json:"puller_pause_s,omitempty"`
	MaxConflicts            int32           `protobuf:"varint,21,opt,name=max_conflicts,json=maxConflicts,proto3" json:"max_conflicts,omitempty"`
	DisableSparseFiles      bool            `protobuf:"varint,22,opt,name=disable_sparse_files,json=disableSparseFiles,proto3" json:"disable_sparse_files,omitempty"`
	DisableTempIndexes      bool            `protobuf:"varint,23,opt,name=disable_temp_indexes,json=disableTempIndexes,proto3" json:"disable_temp_indexes,omitempty"`
	WeakHashThresholdPct    int32           `protobuf:"varint,25,opt,name=weak_hash_threshold_pct,json=weakHashThresholdPct,proto3" json:"weak_hash_threshold_pct,omitempty"`
	MarkerName              string          `protobuf:"bytes,26,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	CopyOwnershipFromParent bool            `protobuf:"varint,27,opt,name=copy_ownership_from_parent,json=copyOwnershipFromParent,proto3" json:"copy_ownership_from_parent,omitempty"`
	ModTimeWindowS          int32           `protobuf:"varint,28,opt,name=mod_time_window_s,json=modTimeWindowS,proto3" json:"mod_time_window_s,omitempty"`
	MaxConcurrentWrites     int32           `protobuf:"varint,29,opt,name=max_concurrent_writes,json=maxConcurrentWrites,proto3" json:"max_concurrent_writes,omitempty"`
	DisableFsync            bool            `protobuf:"varint,30,opt,name=disable_fsync,json=disableFsync,proto3" json:"disable_fsync,omitempty"`
	BlockPullOrder          BlockPullOrder  `protobuf:"varint,31,opt,name=block_pull_order,json=blockPullOrder,proto3,enum=config.BlockPullOrder" json:"block_pull_order,omitempty"`
	CopyRangeMethod         CopyRangeMethod `protobuf:"varint,32,opt,name=copy_range_method,json=copyRangeMethod,proto3,enum=config.CopyRangeMethod" json:"copy_range_method,omitempty"`
	CaseSensitiveFs         bool            `protobuf:"varint,33,opt,name=case_sensitive_fs,json=caseSensitiveFs,proto3" json:"case_sensitive_fs,omitempty"`
	FollowJunctions         bool            `protobuf:"varint,34,opt,name=follow_junctions,json=followJunctions,proto3" json:"follow_junctions,omitempty"`
	SyncOwnership           bool            `protobuf:"varint,35,opt,name=sync_ownership,json=syncOwnership,proto3" json:"sync_ownership,omitempty"`
	SendOwnership           bool            `protobuf:"varint,36,opt,name=send_ownership,json=sendOwnership,proto3" json:"send_ownership,omitempty"`
	SyncXattrs              bool            `protobuf:"varint,37,opt,name=sync_xattrs,json=syncXattrs,proto3" json:"sync_xattrs,omitempty"`
	SendXattrs              bool            `protobuf:"varint,38,opt,name=send_xattrs,json=sendXattrs,proto3" json:"send_xattrs,omitempty"`
}

func (x *FolderConfiguration) Reset() {
	*x = FolderConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderConfiguration) ProtoMessage() {}

func (x *FolderConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderConfiguration.ProtoReflect.Descriptor instead.
func (*FolderConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{5}
}

func (x *FolderConfiguration) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FolderConfiguration) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FolderConfiguration) GetType() FolderType {
	if x != nil {
		return x.Type
	}
	return FolderType_SEND_RECEIVE
}

func (x *FolderConfiguration) GetRescanIntervalS() int32 {
	if x != nil {
		return x.RescanIntervalS
	}
	return 0
}

func (x *FolderConfiguration) GetFsWatcherDisabled() bool {
	if x != nil {
		return x.FsWatcherDisabled
	}
	return false
}

func (x *FolderConfiguration) GetFsWatcherDelayS() float64 {
	if x != nil {
		return x.FsWatcherDelayS
	}
	return 0
}

func (x *FolderConfiguration) GetIgnorePermissions() bool {
	if x != nil {
		return x.IgnorePermissions
	}
	return false
}

func (x *FolderConfiguration) GetNoAutoNormalize() bool {
	if x != nil {
		return x.NoAutoNormalize
	}
	return false
}

func (x *FolderConfiguration) GetMinDiskFree() *Size {
	if x != nil {
		return x.MinDiskFree
	}
	return nil
}

func (x *FolderConfiguration) GetCopiers() int32 {
	if x != nil {
		return x.Copiers
	}
	return 0
}

func (x *FolderConfiguration) GetPullerMaxPendingKib() int32 {
	if x != nil {
		return x.PullerMaxPendingKib
	}
	return 0
}

func (x *FolderConfiguration) GetHashers() int32 {
	if x != nil {
		return x.Hashers
	}
	return 0
}

func (x *FolderConfiguration) GetOrder() PullOrder {
	if x != nil {
		return x.Order
	}
	return PullOrder_PULL_RANDOM
}

func (x *FolderConfiguration) GetIgnoreDelete() bool {
	if x != nil {
		return x.IgnoreDelete
	}
	return false
}

func (x *FolderConfiguration) GetScanProgressIntervalS() int32 {
	if x != nil {
		return x.ScanProgressIntervalS
	}
	return 0
}

func (x *FolderConfiguration) GetPullerPauseS() int32 {
	if x != nil {
		return x.PullerPauseS
	}
	return 0
}

func (x *FolderConfiguration) GetMaxConflicts() int32 {
	if x != nil {
		return x.MaxConflicts
	}
	return 0
}

func (x *FolderConfiguration) GetDisableSparseFiles() bool {
	if x != nil {
		return x.DisableSparseFiles
	}
	return false
}

func (x *FolderConfiguration) GetDisableTempIndexes() bool {
	if x != nil {
		return x.DisableTempIndexes
	}
	return false
}

func (x *FolderConfiguration) GetWeakHashThresholdPct() int32 {
	if x != nil {
		return x.WeakHashThresholdPct
	}
	return 0
}

func (x *FolderConfiguration) GetMarkerName() string {
	if x != nil {
		return x.MarkerName
	}
	return ""
}

func (x *FolderConfiguration) GetCopyOwnershipFromParent() bool {
	if x != nil {
		return x.CopyOwnershipFromParent
	}
	return false
}

func (x *FolderConfiguration) GetModTimeWindowS() int32 {
	if x != nil {
		return x.ModTimeWindowS
	}
	return 0
}

func (x *FolderConfiguration) GetMaxConcurrentWrites() int32 {
	if x != nil {
		return x.MaxConcurrentWrites
	}
	return 0
}

func (x *FolderConfiguration) GetDisableFsync() bool {
	if x != nil {
		return x.DisableFsync
	}
	return false
}

func (x *FolderConfiguration) GetBlockPullOrder() BlockPullOrder {
	if x != nil {
		return x.BlockPullOrder
	}
	return BlockPullOrder_BLOCKS_STANDARD
}

func (x *FolderConfiguration) GetCopyRangeMethod() CopyRangeMethod {
	if x != nil {
		return x.CopyRangeMethod
	}
	return CopyRangeMethod_COPY_RANGE_STANDARD
}

func (x *FolderConfiguration) GetCaseSensitiveFs() bool {
	if x != nil {
		return x.CaseSensitiveFs
	}
	return false
}

func (x *FolderConfiguration) GetFollowJunctions() bool {
	if x != nil {
		return x.FollowJunctions
	}
	return false
}

func (x *FolderConfiguration) GetSyncOwnership() bool {
	if x != nil {
		return x.SyncOwnership
	}
	return false
}

func (x *FolderConfiguration) GetSendOwnership() bool {
	if x != nil {
		return x.SendOwnership
	}
	return false
}

func (x *FolderConfiguration) GetSyncXattrs() bool {
	if x != nil {
		return x.SyncXattrs
	}
	return false
}

func (x *FolderConfiguration) GetSendXattrs() bool {
	if x != nil {
		return x.SendXattrs
	}
	return false
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  string  `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_proto_config_proto_rawDescGZIP(), []int{6}
}

func (x *Size) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Size) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

var File_proto_config_proto protoreflect.FileDescriptor

var file_proto_config_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22,
	0x98, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x69, 0x64,
	0x72, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a, 0x0d, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x76, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x62,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3,
	0x0b, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x66, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x66, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x41,
	0x75, 0x74, 0x6f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x75, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x69, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x62, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x77, 0x65, 0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x70, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x63, 0x6f,
	0x70, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x79,
	0x6e, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x78, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x58, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x78, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x58, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x2a, 0x36, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4e, 0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x56,
	0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x55,
	0x4c, 0x4c, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x52, 0x47,
	0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x4c, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x45, 0x57, 0x45, 0x53,
	0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x4d, 0x0a, 0x0e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f,
	0x4d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xbe, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x50, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4f, 0x43, 0x54, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x50, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x50, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x50, 0x59, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x42, 0x2f, 0x5a, 0x2d, 0x6b, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x6f, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_config_proto_rawDescOnce sync.Once
	file_proto_config_proto_rawDescData = file_proto_config_proto_rawDesc
)

func file_proto_config_proto_rawDescGZIP() []byte {
	file_proto_config_proto_rawDescOnce.Do(func() {
		file_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_config_proto_rawDescData)
	})
	return file_proto_config_proto_rawDescData
}

var file_proto_config_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_config_proto_goTypes = []interface{}{
	(Mode)(0),                   // 0: config.Mode
	(FolderType)(0),             // 1: config.FolderType
	(PullOrder)(0),              // 2: config.PullOrder
	(BlockPullOrder)(0),         // 3: config.BlockPullOrder
	(CopyRangeMethod)(0),        // 4: config.CopyRangeMethod
	(*Configuration)(nil),       // 5: config.Configuration
	(*SyncthingInstance)(nil),   // 6: config.SyncthingInstance
	(*DevicePattern)(nil),       // 7: config.DevicePattern
	(*FolderPattern)(nil),       // 8: config.FolderPattern
	(*DeviceConfiguration)(nil), // 9: config.DeviceConfiguration
	(*FolderConfiguration)(nil), // 10: config.FolderConfiguration
	(*Size)(nil),                // 11: config.Size
}
var file_proto_config_proto_depIdxs = []int32{
	6,  // 0: config.Configuration.syncthing:type_name -> config.SyncthingInstance
	7,  // 1: config.Configuration.pattern:type_name -> config.DevicePattern
	8,  // 2: config.DevicePattern.folder:type_name -> config.FolderPattern
	9,  // 3: config.DevicePattern.settings:type_name -> config.DeviceConfiguration
	10, // 4: config.FolderPattern.settings:type_name -> config.FolderConfiguration
	1,  // 5: config.FolderConfiguration.type:type_name -> config.FolderType
	11, // 6: config.FolderConfiguration.min_disk_free:type_name -> config.Size
	2,  // 7: config.FolderConfiguration.order:type_name -> config.PullOrder
	3,  // 8: config.FolderConfiguration.block_pull_order:type_name -> config.BlockPullOrder
	4,  // 9: config.FolderConfiguration.copy_range_method:type_name -> config.CopyRangeMethod
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_config_proto_init() }
func file_proto_config_proto_init() {
	if File_proto_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncthingInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_config_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_config_proto_goTypes,
		DependencyIndexes: file_proto_config_proto_depIdxs,
		EnumInfos:         file_proto_config_proto_enumTypes,
		MessageInfos:      file_proto_config_proto_msgTypes,
	}.Build()
	File_proto_config_proto = out.File
	file_proto_config_proto_rawDesc = nil
	file_proto_config_proto_goTypes = nil
	file_proto_config_proto_depIdxs = nil
}
